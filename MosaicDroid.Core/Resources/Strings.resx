<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Btn_Load" xml:space="preserve">
    <value>Load</value>
  </data>
  <data name="Btn_Resize" xml:space="preserve">
    <value>Resize</value>
  </data>
  <data name="Btn_Run" xml:space="preserve">
    <value>Run</value>
  </data>
  <data name="Btn_Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Docs_NotFound" xml:space="preserve">
    <value>Help file not found.</value>
  </data>
  <data name="Err_InvalidValue" xml:space="preserve">
    <value>Sorry, invalid value: {0}</value>
  </data>
  <data name="Lbl_Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Lbl_Size" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="Err_MissingNewLine" xml:space="preserve">
    <value>Missing newline after</value>
  </data>
  <data name="Err_Runtime" xml:space="preserve">
    <value>Runtime error: {0}</value>
  </data>
  <data name="Lex_Err" xml:space="preserve">
    <value>Lexer Error</value>
  </data>
  <data name="Parser_Error" xml:space="preserve">
    <value>Parser Error</value>
  </data>
  <data name="Sem_Err" xml:space="preserve">
    <value>Semantic Error</value>
  </data>
  <data name="Inv_DrwLine" xml:space="preserve">
    <value>Invalid arguments to DrawLine at</value>
  </data>
  <data name="Inv_DrwCircle" xml:space="preserve">
    <value>Invalid arguments to DrawCircle at</value>
  </data>
  <data name="Inv_DrwRectangle" xml:space="preserve">
    <value>Invalid arguments to DrawLine at</value>
  </data>
  <data name="Err_LabelUndefined" xml:space="preserve">
    <value>Label {0} not declared</value>
  </data>
  <data name="Btn_Unmute" xml:space="preserve">
    <value>Unmute</value>
  </data>
  <data name="Btn_Mute" xml:space="preserve">
    <value>Mute</value>
  </data>
  <data name="PotentialInfiniteLoop" xml:space="preserve">
    <value>Potential infinite loop at</value>
  </data>
  <data name="MovedOutsideCanvas" xml:space="preserve">
    <value>Moved outside canvas at</value>
  </data>
  <data name="DivByZero" xml:space="preserve">
    <value>Division by zero at</value>
  </data>
  <data name="ModulusByZero" xml:space="preserve">
    <value>Modulus by zero at</value>
  </data>
  <data name="UndefinedVariable" xml:space="preserve">
    <value>Undefined variable</value>
  </data>
  <data name="ZeroToZeroPower" xml:space="preserve">
    <value>Zero to zero power (0^0) at</value>
  </data>
  <data name="ExpectedSpawn" xml:space="preserve">
    <value>Please make sure your code starts with a Spawn(x,y)</value>
  </data>
  <data name="MissingNewLine" xml:space="preserve">
    <value>Missing newline after </value>
  </data>
  <data name="MissingParenthesis" xml:space="preserve">
    <value>Expected</value>
  </data>
  <data name="MissingOpenParen" xml:space="preserve">
    <value>Sorry, there's a missing open parenthesis</value>
  </data>
  <data name="InvalidVariableName" xml:space="preserve">
    <value>Sorry, please make sure the variable name {0} is valid according to the grammar rules</value>
  </data>
  <data name="InvalidLabelName" xml:space="preserve">
    <value>Sorry, please make sure the label name {0} is valid according to the grammar rules</value>
  </data>
  <data name="UnexpectedToken" xml:space="preserve">
    <value>Unexpected token</value>
  </data>
  <data name="MissingQuotation" xml:space="preserve">
    <value>Please make sure your color is inside quotations</value>
  </data>
  <data name="UnknownInstrFunc" xml:space="preserve">
    <value>Unknown Instruction or Function</value>
  </data>
  <data name="DuplicateSpawn" xml:space="preserve">
    <value>Only one Spawn(x,y) allowed</value>
  </data>
  <data name="DuplicateLabel" xml:space="preserve">
    <value>Sorry the label {0} can only be declared once</value>
  </data>
  <data name="UndefinedVariableSemantic" xml:space="preserve">
    <value>Variable {0} is not declared</value>
  </data>
  <data name="InvalidColor" xml:space="preserve">
    <value>Sorry, unknown color detected: </value>
  </data>
  <data name="InvalidGoTo" xml:space="preserve">
    <value>Sorry, please make sure the condition for the GoTo is boolean</value>
  </data>
  <data name="InvalidOperands" xml:space="preserve">
    <value>Sorry, both operands for the operation {0} need to be both integers or both be text (for boolean operations)</value>
  </data>
  <data name="ArgMismatch" xml:space="preserve">
    <value>Sorry, for {0} we expect argument {1} to be of type {2} but got {3}</value>
  </data>
  <data name="WrongArity" xml:space="preserve">
    <value>Sorry, for {0} we expect {1} arguments but got {2}</value>
  </data>
  <data name="UndefinedLabel" xml:space="preserve">
    <value>Sorry, label {0} not declared</value>
  </data>
  <data name="InvalidAssign" xml:space="preserve">
    <value>Cannot assign invalid expression to: </value>
  </data>
  <data name="InvalidFunctionCall" xml:space="preserve">
    <value>Function calls cannot be nested as arguments</value>
  </data>
  <data name="UnrecognizedChar" xml:space="preserve">
    <value>Unrecognized Character </value>
  </data>
  <data name="UnterminatedString" xml:space="preserve">
    <value>Sorry, unterminated string literal</value>
  </data>
  <data name="UnterminatedText" xml:space="preserve">
    <value>Sorry, unterminated text literal; expected closing</value>
  </data>
  <data name="InvalidId" xml:space="preserve">
    <value>Sorry, please fix the invalid identifier</value>
  </data>
  <data name="InvalidInt" xml:space="preserve">
    <value>Sorry, please fix the invalid integer</value>
  </data>
  <data name="UnexpectedEOI" xml:space="preserve">
    <value>Sorry, unexpected end of input in lexer</value>
  </data>
  <data name="MissingErrorList" xml:space="preserve">
    <value>Internal error: missing runtime-errors list</value>
  </data>
</root>